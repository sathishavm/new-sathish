# Github Webhooks
A simple application built with Ruby and Sinatra, this application is used to monitor all github webhooks and push the custom 'Github webhook responses' to 'Google Pub/sub'.

## Motive
* To support applications built with GCP 'Google Cloud Platform'.
* To support many shell based application.
* To receive the 'Github webhooks' and configure the custom notifications.
* To receive the uninterrupted notification even after the down time.


## Application Setup
1) Review the '.env.sample' file and setup all the mandatory environment variables in '.env' file.
2) Create a new webhook in the Github(https://github.com/organizations/xxxxxx/settings/hooks/new) for the whole organization.
3) Create and configure the 'Google Pubsub' to publish the webhooks messages.

## Help
```
  Github Webhook Payload URL         https://APPLICATION_URL/payload
  List available Pub/Sub topics      Navigate to https://APPLICATION_URL/topics
  GOOGLE_CLOUD_KEYFILE               Create a Key in GCP(IAM & admin) in JSON format and give the downloaded secret keyfile.json path in env variable.
```

## Custom action for Github Webhook Handler
  We can write our own custom hook handler and create new Google pub/sub topics and data.

  Custom Handler are configured in 'config/common_topics.yml' and write a custom method in 'lib/events.rb'
  Eg:
   To Monitor and create pub/sub topic for all the changes pushed in 'Default branch'(i.e Master branch)
   1) Configure "common_topic.yml"
   ```bash
    push:
      master_changes: 'Push-to-master'
    ```
    Where 
    > "push" is the github webhook event name ([https://developer.github.com/v3/activity/events/types/#pushevent](https://developer.github.com/v3/activity/events/types/#pushevent)).
    > "master_changes" is the custom method name.
    > 'Push-to-master' is the Pub/sub Topic name.


   2) Define the custom methos in events.rb
     ```bash
     def master_changes(topic_name, args)
	    branch_name = @body['ref']
	    return "Not a branch. Nothing to do." if branch_name.nil? || branch_name.empty?
	    branch_name.slice!("refs/heads/")
	    if @body['repository']['default_branch'] == branch_name
	      push_message(topic_name)
	    end
	  end
	  ```
    Where it checks the pushed branch is the 'default_branch' and if so, then it will push the message to the topic "Push-to-master".

## Subscription
 Refer Google Pub/sub configuration for subscription to the particular 'Google Pub/sub' topic. 
 As per google we need to decode the subscription message using Base64 module.

## Contributing
This project is mainly depends on Github Webhooks and Google Pub/Sub API configuration.

